#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app'),
    debug = require('debug')('app-imdb-request'),
    http = require('http'),
    cluster = require('cluster'),
    numCPUs = require('os').cpus().length;

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
* Create HTTP server.
*/

if (cluster.isMaster) {
    console.log(`Master ${process.pid} is running`);
    
    // Fork workers.
    for (let i = 0; i < numCPUs; i++) {
        cluster.fork();
    }
    
    cluster.on('exit', (worker, code, signal) => {
        console.log(`worker ${worker.process.pid} died`);
    });
}
else {
    // Workers can share any TCP connection
    // In this case it is an HTTP server
    // http.createServer(app);
    http.createServer(app).listen(app.get('port'), function(){
        debug("Express server listening on port " + app.get('port'));
        console.log('Worker ' + cluster.worker.id + ' running!');
    });
    
    console.log(`Worker ${process.pid} started`);
}